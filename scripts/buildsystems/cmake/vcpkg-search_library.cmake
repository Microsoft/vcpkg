#Setup common debug suffix used by ports;
set(VCPKG_ADDITIONAL_DEBUG_LIBNAME_SEARCH_SUFFIXES "d;D;_d;_D;-d;-D;-gd;-debug;_debug;_Debug;_DEBUG")
#TODO: Split search for shared libs .dll/.so and libs .a/.lib !
#foreach(_dbg_suffix ${VCPKG_ADDITIONAL_DEBUG_LIBNAME_SEARCH_SUFFIXES})
#	list(APPEND VCPKG_ADDITIONAL_DEBUG_LIBNAME_SEARCH_SUFFIXES "${_dbg_suffix}.lib")
#	list(APPEND VCPKG_ADDITIONAL_DEBUG_LIBNAME_SEARCH_SUFFIXES "${_dbg_suffix}.a")
#	list(APPEND VCPKG_ADDITIONAL_DEBUG_LIBNAME_SEARCH_SUFFIXES "${_dbg_suffix}.dll")
#	list(APPEND VCPKG_ADDITIONAL_DEBUG_LIBNAME_SEARCH_SUFFIXES "${_dbg_suffix}.so")
#endforeach()
mark_as_advanced(VCPKG_ADDITIONAL_DEBUG_LIBNAME_SEARCH_SUFFIXES)

function(vcpkg_search_library_debug OUTPUT_VAR)
    if(NOT VCPKG_DEBUG_AVAILABLE)
        set(${OUTPUT_VAR} "${OUTPUT_VAR}-NOTFOUND" PARENT_SCOPE)
        return()
    endif()
    cmake_parse_arguments(PARSE_ARGV 0 _vcpkg_search_lib "" "" "NAMES;PATH_SUFFIXES")
    if(NOT DEFINED _vcpkg_search_lib_NAMES)
        if("${ARGV}" MATCHES "NAMES")
            #NAMES in argument list but not parsed for some reason -> retry with old parser syntax
            vcpkg_msg(STATUS "vcpkg_search_library_debug" "cmake_parse_arguments PARSE_ARGV not working correctly! Retrying!")
            cmake_parse_arguments(_vcpkg_search_lib "" "" "NAMES;PATH_SUFFIXES" ${ARGN})
        endif()
        if(NOT DEFINED _vcpkg_search_lib_NAMES)
            message(FATAL_ERROR "vcpkg_search_library_debug requires NAMES option")
        else()
            vcpkg_msg(STATUS "vcpkg_search_library_debug" "Search names: ${_vcpkg_search_lib_NAMES}")
        endif()
    endif()
    vcpkg_build_library_debug_search_paths(_vcpkg_search_paths ${_vcpkg_search_lib_PATH_SUFFIXES})
    vcpkg_msg(STATUS "vcpkg_search_library_debug" "Search paths: ${_vcpkg_search_paths}")
    _find_library(_vcpkg_lib_out NAMES ${_vcpkg_search_lib_NAMES} NAMES_PER_DIR PATHS ${_vcpkg_search_paths} NO_DEFAULT_PATH)
    
    # Retry without common debug suffixes
    if(${_vcpkg_lib_out} MATCHES "NOTFOUND")    
        vcpkg_msg(STATUS "vcpkg_search_library_debug" "Searching without common debug suffixes!")
        foreach(_vcpkg_debug_suffix ${VCPKG_ADDITIONAL_DEBUG_LIBNAME_SEARCH_SUFFIXES})
            vcpkg_remove_debug_suffixes(_vcpkg_search_lib_name ${_vcpkg_search_lib_NAMES} )
            if(DEFINED _vcpkg_search_lib_name)
                vcpkg_msg(STATUS "vcpkg_search_library_debug" "Search names: ${_vcpkg_search_lib_name}")
                _find_library(_vcpkg_lib_out_${_vcpkg_debug_suffix} NAMES ${_vcpkg_search_lib_name} NAMES_PER_DIR PATHS ${_vcpkg_search_paths} NO_DEFAULT_PATH)
                if(NOT "${_vcpkg_lib_out_${_vcpkg_debug_suffix}}" MATCHES "NOTFOUND")
                    set(_vcpkg_lib_out "${_vcpkg_lib_out_${_vcpkg_debug_suffix}}" CACHE INTERNAL "")
                    unset(_vcpkg_lib_out_${_vcpkg_debug_suffix} CACHE)
                    break()
                endif()
                unset(_vcpkg_lib_out_${_vcpkg_debug_suffix} CACHE)
            endif()
        endforeach()
    endif()
    
    # Retry with common debug suffixes  
    if(${_vcpkg_lib_out} MATCHES "NOTFOUND") 
        vcpkg_msg(STATUS "vcpkg_search_library_debug" "Searching with common debug suffixes!")  
        foreach(_vcpkg_debug_suffix ${VCPKG_ADDITIONAL_DEBUG_LIBNAME_SEARCH_SUFFIXES})
            set(_vcpkg_debug_lib_names_${_vcpkg_debug_suffix})
            foreach(_vcpkg_lib_out_name ${_vcpkg_search_lib_NAMES})
                vcpkg_msg(STATUS "vcpkg_search_library_debug" "Generating debug name: ${_vcpkg_lib_out_name}${_vcpkg_debug_suffix}")
                list(APPEND _vcpkg_debug_lib_names_${_vcpkg_debug_suffix} ${_vcpkg_lib_out_name}${_vcpkg_debug_suffix})
            endforeach()
            vcpkg_msg(STATUS "vcpkg_search_library_debug" "Search names: ${_vcpkg_debug_lib_names_${_vcpkg_debug_suffix}}")
            vcpkg_msg(STATUS "vcpkg_search_library_debug" "Search PATHS: ${_vcpkg_search_paths}")
            _find_library(_vcpkg_lib_out_${_vcpkg_debug_suffix} NAMES ${_vcpkg_debug_lib_names_${_vcpkg_debug_suffix}} NAMES_PER_DIR PATHS ${_vcpkg_search_paths} NO_DEFAULT_PATH)
            if(NOT "${_vcpkg_lib_out_${_vcpkg_debug_suffix}}" MATCHES "NOTFOUND")
                if(NOT "${_vcpkg_lib_out_${_vcpkg_debug_suffix}}" MATCHES "${_VCPKG_INSTALLED_DIR}/${VCPKG_TARGET_TRIPLET}/debug")
                    vcpkg_msg(FATAL_ERROR "vcpkg_search_library_debug" "Somehow found release library!")
                endif()
                set(_vcpkg_lib_out "${_vcpkg_lib_out_${_vcpkg_debug_suffix}}" CACHE INTERNAL "")
                unset(_vcpkg_lib_out_${_vcpkg_debug_suffix} CACHE)
                break()
            endif()
            unset(_vcpkg_lib_out_${_vcpkg_debug_suffix} CACHE)
        endforeach()
    endif()
    set(${OUTPUT_VAR} ${_vcpkg_lib_out} PARENT_SCOPE)
    if(${_vcpkg_lib_out} MATCHES "NOTFOUND")
        vcpkg_msg(WARNING "vcpkg_search_library_debug" "Debug library not found! Search names: ${_vcpkg_search_lib_NAMES}")
    endif()
    vcpkg_msg(STATUS "vcpkg_search_library_debug" "${OUTPUT_VAR} set to ${_vcpkg_lib_out}")
    
    unset(_vcpkg_lib_out CACHE)
endfunction()

function(vcpkg_search_library_release OUTPUT_VAR)
    cmake_parse_arguments(PARSE_ARGV 0 _vcpkg_search_lib "" "" "NAMES;PATH_SUFFIXES")
    if(NOT DEFINED _vcpkg_search_lib_NAMES)
        if("${ARGV}" MATCHES "NAMES")
            #NAMES in argument list but not parsed for some reason -> retry with old parser syntax
            vcpkg_msg(STATUS "vcpkg_search_library_release" "cmake_parse_arguments PARSE_ARGV not working correctly! Retrying!")
            cmake_parse_arguments(_vcpkg_search_lib "" "" "NAMES;PATH_SUFFIXES" ${ARGN})
        endif()
        if(NOT DEFINED _vcpkg_search_lib_NAMES)
            message(FATAL_ERROR "vcpkg_search_library_release requires NAMES option")
        else()
            vcpkg_msg(STATUS "vcpkg_search_library_release" "Search names: ${_vcpkg_search_lib_NAMES}")
        endif()
    endif()
    vcpkg_build_library_release_search_paths(_vcpkg_search_paths ${_vcpkg_search_lib_PATH_SUFFIXES})
    vcpkg_msg(STATUS "vcpkg_search_library_release" "Search paths: ${_vcpkg_search_paths}") 
    _find_library(_vcpkg_lib_out NAMES ${_vcpkg_search_lib_NAMES} NAMES_PER_DIR PATHS ${_vcpkg_search_paths} NO_DEFAULT_PATH)
    
    # Retry without common debug suffixes   
    if(${_vcpkg_lib_out} MATCHES "NOTFOUND")    
        foreach(_vcpkg_debug_suffix ${VCPKG_ADDITIONAL_DEBUG_LIBNAME_SEARCH_SUFFIXES})
            vcpkg_remove_debug_suffixes(_vcpkg_search_lib_name ${_vcpkg_search_lib_NAMES} )
            vcpkg_msg(STATUS "vcpkg_search_library_release" "Search names: ${_vcpkg_search_lib_name}")
            _find_library(_vcpkg_lib_out_${_vcpkg_debug_suffix} NAMES ${_vcpkg_search_lib_name} NAMES_PER_DIR PATHS ${_vcpkg_search_paths} NO_DEFAULT_PATH)
            if("${_vcpkg_lib_out_${_vcpkg_debug_suffix}}" MATCHES "${_VCPKG_INSTALLED_DIR}/${VCPKG_TARGET_TRIPLET}/debug")
                vcpkg_msg(FATAL_ERROR "vcpkg_search_library_release" "Somehow found debug library! :${_vcpkg_lib_out_${_vcpkg_debug_suffix}}")
            endif()
            if("${_vcpkg_lib_out_${_vcpkg_debug_suffix}}" MATCHES "${_VCPKG_INSTALLED_DIR}/${VCPKG_TARGET_TRIPLET}")
                set(_vcpkg_lib_out "${_vcpkg_lib_out_${_vcpkg_debug_suffix}}" CACHE INTERNAL "")
                unset(_vcpkg_lib_out_${_vcpkg_debug_suffix} CACHE)
                break()
            endif()
            unset(_vcpkg_lib_out_${_vcpkg_debug_suffix} CACHE)
        endforeach()
    endif()
    
    set(${OUTPUT_VAR} ${_vcpkg_lib_out} PARENT_SCOPE)
    if(${_vcpkg_lib_out} MATCHES "NOTFOUND")
        vcpkg_msg(WARNING "vcpkg_search_library_release" "Release library not found! Search names: ${_vcpkg_search_lib_NAMES}")
    endif()
    vcpkg_msg(STATUS "vcpkg_search_library_release" "${OUTPUT_VAR} set to ${_vcpkg_lib_out}")
    unset(_vcpkg_lib_out CACHE)
endfunction()

function(vcpkg_remove_debug_suffixes OUT_NAMES)
    set(_tmp_list)
    foreach(_vcpkg_debug_suffix ${VCPKG_ADDITIONAL_DEBUG_LIBNAME_SEARCH_SUFFIXES})
        vcpkg_msg(STATUS "vcpkg_remove_debug_suffixes" "Suffix to remove: ${_vcpkg_debug_suffix}")
        vcpkg_msg(STATUS "vcpkg_remove_debug_suffixes" "Remove from: ${ARGN}")
        string(REGEX REPLACE "${_vcpkg_debug_suffix}$" "" _vcpkg_search_lib_name "${ARGN}")
        #vcpkg_msg(STATUS "vcpkg_remove_debug_suffixes" "${_vcpkg_search_lib_name}")
        string(REGEX REPLACE "${_vcpkg_debug_suffix};" ";" _vcpkg_search_lib_name "${_vcpkg_search_lib_name}")
        vcpkg_msg(STATUS "vcpkg_remove_debug_suffixes" "Removed: ${_vcpkg_search_lib_name}")
        if(NOT "${ARGN}" STREQUAL "${_vcpkg_search_lib_name}")
            list(APPEND _tmp_list ${_vcpkg_search_lib_name})
            vcpkg_msg(STATUS "vcpkg_remove_debug_suffixes" "list updated: ${_tmp_list}")
        endif()
    endforeach()
    list(REMOVE_DUPLICATES _tmp_list)
    vcpkg_msg(STATUS "vcpkg_remove_debug_suffixes" "final search list: ${_tmp_list}")
    set(${OUT_NAMES} ${_tmp_list} PARENT_SCOPE)
endfunction()

function(vcpkg_add_debug_suffixes OUT_NAMES NAMES)
    set(_tmp_list)
    foreach(_vcpkg_debug_suffix ${VCPKG_ADDITIONAL_DEBUG_LIBNAME_SEARCH_SUFFIXES})
        foreach(_vcpkg_lib_out_name ${_vcpkg_search_lib_NAMES})
            list(APPEND _tmp_list ${_vcpkg_lib_out_name}${_vcpkg_debug_suffix})
        endforeach()
    endforeach()
    list(REMOVE_DUPLICATES _tmp_list)
    set(${OUT_NAMES} ${_tmp_list} PARENT_SCOPE)
endfunction()

# function(vcpkg_extract_library_found_name FOUND_NAME SEARCH_NAMES LIBRARY_PATH)
    # foreach(_search_name ${SEARCH_NAMES})
        # if(${LIBRARY_PATH} MATCHES "\\${_search_name}\\${CMAKE_STATIC_LIBRARY_SUFFIX}$")
            # set(${FOUND_NAME} ${_search_name} PARENT_SCOPE)
            # vcpkg_msg(STATUS "vcpkg_extract_library_found_name" "Found library name: ${_search_name} in path: ${LIBRARY_PATH}!")
            # break()
        # endif()
    # endforeach()
    # unset(_search_name)
# endfunction()

function(vcpkg_extract_library_name_from_path EXTRACTED_NAME LIBRARY_PATH)
    get_filename_component(_tmp_name "${LIBRARY_PATH}" NAME)
    string(REGEX REPLACE "\\${CMAKE_STATIC_LIBRARY_SUFFIX}$" "" _tmp_name ${_tmp_name})
    set(${EXTRACTED_NAME} ${_tmp_name} PARENT_SCOPE)
endfunction()

function(vcpkg_build_library_search_paths OUT_VAR PATH_SUFFIXES VCPKG_SUFFIX)
    set(_vcpkg_path_search_list "${_VCPKG_INSTALLED_DIR}/${VCPKG_TARGET_TRIPLET}${VCPKG_SUFFIX}/lib")
    list(APPEND _vcpkg_path_search_list "${_VCPKG_INSTALLED_DIR}/${VCPKG_TARGET_TRIPLET}${VCPKG_SUFFIX}/lib/manual-link")
    list(APPEND _vcpkg_path_search_list "${_VCPKG_INSTALLED_DIR}/${VCPKG_TARGET_TRIPLET}${VCPKG_SUFFIX}/bin")
    list(APPEND _vcpkg_path_search_list "${_VCPKG_INSTALLED_DIR}/${VCPKG_TARGET_TRIPLET}${VCPKG_SUFFIX}") # Last resort
    if(DEFINED PATH_SUFFIXES)
        string(REGEX REPLACE "[Dd][Ee][Bb][Uu][Gg]/" "" PATH_SUFFIXES "${PATH_SUFFIXES}")
        foreach(_vcpkg_path_prefix ${_vcpkg_path_search_list})
            foreach(_path_suffix ${PATH_SUFFIXES})
                list(APPEND _vcpkg_path_search_list "${_vcpkg_path_prefix}/${_path_suffix}")
            endforeach()
        endforeach()
    endif()
    set(${OUT_VAR} ${_vcpkg_path_search_list} PARENT_SCOPE)
endfunction()

function(vcpkg_build_library_release_search_paths OUT_VAR)
    vcpkg_build_library_search_paths("${OUT_VAR}" "${ARGV1}" "")
    set(${OUT_VAR} ${${OUT_VAR}} PARENT_SCOPE)
endfunction()

function(vcpkg_build_library_debug_search_paths OUT_VAR)
    vcpkg_build_library_search_paths("${OUT_VAR}" "${ARGV1}" "/debug")
    set(${OUT_VAR} ${${OUT_VAR}} PARENT_SCOPE)
endfunction()